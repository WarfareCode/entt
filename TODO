* long term feature: shared_ptr less locator and resource cache
* custom allocators and EnTT allocator-aware in general (long term feature, I don't actually need it at the moment) - see #22
* debugging tools (#60): the issue online already contains interesting tips on this, look at it
* work stealing job system (see #100) + mt scheduler based on const awareness for types
* meta: sort of meta view based on meta stuff to iterate entities, void * and meta info objects (remove runtime views, welcome reflection and what about snapshot?)
* add opaque input iterators to views and groups that return tuples <entity, T &...> (proxy), multi-pass guaranteed
* allow to replace std:: with custom implementations
* allow for custom stomp functions
* custom (decoupled) pools ==> N-buffering, shared components, multi-model, hibitsets, and so on
* snapshot rework/deprecation
  - create(hint: entity) -> force-create
  - assign<T...>(first, last)
* allow for key/value variables where the key is an ENTT_ID_TYPE
* add examples (and credits) from @alanjfs :)
* static reflection, hint: template<> meta_type_t<Type>: meta_descriptor<name, func..., props..., etc...>
* add meta support to registry (eg entity for each component and opaque get)
* stomp -> merge (naming is hard as heck, it's known thing)
* observer: user defined filters (eg .replace<T, &function> or .group<T, U, &func>)
* any-of rule for views/groups (eg entity has A and any of B/C/D)
* sparse set: there exists an alternative to paginated sparse arrays?
* see warning (vs2017 only): d:\a\entt\entt\src\entt\entity\registry.hpp(108)
* registry
  - ::assure -> pool_type<T> &
  - ::group improve, reduce code

* Mission: get rid of named types
  - make it possible to use custom generators (eg for plugins)
    * dispatcher, emitter, registry
    * dispatcher/emitter: id shouldn't be part of the class (upcoming feature discard will create a hole otherwise)
    * type_id_enabled and fallback on old-fashioned families otherwise
  - reintroduce old-fashion family and add a new family-like thing with generators
  - families should be defined as out-of-class to guarantee the same identifiers for the same types
  - update doc: family, dispatcher, emitter, registry, meta, across boundaries
  - update tests
  - review and suppress warnings, if any
  - remove ENTT_API from OPAQUE_TYPE
